{"version":3,"sources":["scripts/main.js"],"names":["waitFor","element","eventName","Promise","resolve","reject","addEventListener","actualEvent","type","nodeName","id","printMessage","message","newMessage","document","createElement","className","textContent","body","append","module","exports"],"mappings":";AAAA,aAEA,SAASA,EAAQC,EAASC,GACjB,OAAA,IAAIC,QAAQ,SAASC,EAASC,GACnCJ,EAAQK,iBAAiBJ,EAAW,SAACK,GAC/BA,EAAYC,OAASN,GACvBE,EACYF,UAAAA,OAAAA,EAA6BD,qBAAAA,OAAAA,EAAQQ,SACzCR,qBAAAA,OAAAA,EAAQS,GAFhB,UASR,IAAMC,EAAe,SAACC,GACdC,IAAAA,EAAaC,SAASC,cAAc,OAE1CF,EAAWG,UAAY,UACvBH,EAAWI,YAAcL,EACzBE,SAASI,KAAKC,OAAON,IAGvBO,OAAOC,QAAU,CACfrB,QAAAA,EACAW,aAAAA","file":"main.d8a65f40.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction waitFor(element, eventName) {\n  return new Promise(function(resolve, reject) {\n    element.addEventListener(eventName, (actualEvent) => {\n      if (actualEvent.type === eventName) {\n        resolve(\n          `It was ${eventName} on the element: ${element.nodeName},\n          id: ${element.id}.`\n        );\n      }\n    });\n  });\n}\n\nconst printMessage = (message) => {\n  const newMessage = document.createElement('div');\n\n  newMessage.className = 'message';\n  newMessage.textContent = message;\n  document.body.append(newMessage);\n};\n\nmodule.exports = {\n  waitFor,\n  printMessage,\n};\n"]}